#!/usr/bin/env php
<?php

/**
 * The project (or Phar) base path.
 *
 * @var string
 */
define('BOX_PATH', dirname(__DIR__));

if (extension_loaded('phar') && ($uri = Phar::running())) {
    require "$uri/src/vendors/autoload.php";
} elseif (class_exists('Extract')) {
    require __DIR__ . '/../src/vendors/autoload.php';
} else {
    loadComposerClassloader(realpath($_SERVER['argv'][0]));
}

$app = new KevinGH\Box\Application();
$app->run();

/**
 * Finds the Composer autoloader and returns it.
 *
 * @param null $dir  The starting directory.
 *
 * @return Composer\Autoload\ClassLoader The class loader.
 *
 * @throws RuntimeException If the loader could not be loaded.
 */
function loadComposerClassloader($dir = null)
{
    $up = $dir;
    $jsonPath = '';
    $autoloaderPath = '';

    do {
        $dir = $up;

        if (file_exists("$dir/composer.json")) {
            $jsonPath = realpath("$dir/composer.json");
            $vendorPath = $dir . DIRECTORY_SEPARATOR . getVendorDirectoryName($jsonPath);
            $autoloaderPath = $vendorPath . DIRECTORY_SEPARATOR . 'autoload.php';
        }

        $up = dirname($dir);
    } while ($dir !== $up && (!file_exists($autoloaderPath)));

    if (empty($jsonPath)) {
        throw new RuntimeException(
            'The composer.json file could not be found.'
        );
    }

    if (empty($autoloaderPath)) {
        throw new RuntimeException(
            'The composer autoload.php file could not be found.'
        );
    }

    if (false === file_exists($autoloaderPath)) {
        throw new RuntimeException(
            sprintf(
                'The Composer class loader "%s" could not be found.',
                $autoloaderPath
            )
        );
    }

    return include $autoloaderPath;
}

/**
 * @param $path Path of the composer.json
 * @return string The name of the vendor directory
 */
function getVendorDirectoryName($path)
{
    if (false === ($json = file_get_contents($path))) {
        throw new RuntimeException(
            sprintf(
                'The file "%s" could not be read.',
                $path
            )
        );
    }

    $json = json_decode($json);

    if (JSON_ERROR_NONE !== ($code = json_last_error())) {
        throw new RuntimeException(
            sprintf(
                'The file "%s" could not be parsed [%d].',
                $path,
                $code
            )
        );
    }

    if (isset($json->config) && isset($json->config->{'vendor-dir'})) {
        return $json->config->{'vendor-dir'};
    }

    return 'vendor';
}
